---
- name: "Check if {{ application_name }} is installed"
  ansible.builtin.find:
    name: "{{ toolbox_install_dir }}"
    file_type: "file"
    pattern: "{{ toolbox_executable }}"
    use_regex: false
    recurse: true
    depth: 2
  register: is_installed

- name: "Check for multiple installations"
  ansible.builtin.fail:
    msg: "Warning: {{ is_installed.matched }} installations found in {{ toolbox_install_dir }}! Please, fix it manually."
  failed_when: is_installed.matched > 1

- name: Get the latest version data
  block:
    - name: Fetch the release data
      ansible.builtin.uri:
        url: "https://data.services.jetbrains.com/products/releases?code=TBA&latest=true&type=release"
        method: GET
        return_content: true
        status_code: 200
        body_format: json
      register: latest_relese_output

    - name: Extract the release data
      ansible.builtin.set_fact:
        download_url: "{{ latest_relese_output.json | json_query('TBA[0].downloads.linux.link') }}"
        build_version: "{{ latest_relese_output.json | json_query('TBA[0].build') }}"

- name: "Installation process"
  block:
    - name: "Download {{ application_name }}"
      ansible.builtin.get_url:
        url: "{{ download_url }}"
        dest: "{{ temporary_file_name }}"
        mode: 0644

    - name: Create folders
      ansible.builtin.file:
        dest: "{{ toolbox_install_dir }}"
        state: directory
        recurse: true
        mode: 0755
        force: false

    - name: "Install to {{ toolbox_install_dir }}"
      ansible.builtin.unarchive:
        remote_src: true
        src: "{{ temporary_file_name }}"
        dest: "{{ toolbox_install_dir }}"

    - name: Find the executable
      ansible.builtin.find:
        name: "{{ toolbox_install_dir }}"
        file_type: "file"
        pattern: "{{ toolbox_executable }}"
        use_regex: false
        recurse: true
      register: toolbox_executable_unarchive_location_result

    - name: Set variables
      ansible.builtin.set_fact:
        toolbox_executable_unarchive_location: "{{ toolbox_executable_unarchive_location_result.files[0].path }}"
      when: toolbox_executable_unarchive_location_result.matched == 1

    - name: "Move executable to the target folder"
      ansible.builtin.copy:
        src: "{{ toolbox_executable_unarchive_location }}"
        dest: "{{ toolbox_install_path }}"
        remote_src: true
        owner: "root"
        group: "root"
        mode: "0777"
      when: toolbox_executable_unarchive_location != toolbox_install_path

    - name: "Remove temporary folders and files"
      ansible.builtin.file:
        name: "{{ item }}"
        state: "absent"
      with_items:
        - "{{ (toolbox_executable_unarchive_location | dirname) if toolbox_executable_unarchive_location != toolbox_install_path else undefined }}"
        - "{{ temporary_file_name }}"
      when: item is defined

    - name: "Run as user to finish installation"
      ansible.builtin.command: "{{ toolbox_install_path }}"
      become: true
      become_user: "{{ toolbox_install_for_user }}"
      when: toolbox_install_for_user | length

    - name: Reminder how to launch
      ansible.builtin.debug:
        msg: |
          User, who will use {{ application_name }}, have to run {{ toolbox_install_path }}
          manually for the first time.
      when: not (toolbox_install_for_user | length)

  when: is_installed.matched == 0

- name: Set Inotify Watches Limit
  sysctl: name="fs.inotify.max_user_watches"
    value="{{ inotify_max_user_watches }}"
    state="present"
    reload="yes"
